package com.noxcrew.noxesium.paper

import com.noxcrew.noxesium.paper.v2.RemoteServerRuleV2
import com.viaversion.viaversion.api.Via
import com.viaversion.viaversion.api.type.Types
import io.netty.buffer.Unpooled
import org.bukkit.Bukkit
import org.bukkit.Material
import org.bukkit.entity.Player
import org.bukkit.inventory.ItemStack

/** A server rule that stores an item stack. */
public class ItemStackTest(
    index: Int,
    default: ItemStack = ItemStack(Material.AIR),
) : RemoteServerRuleV2<ItemStack>(index, default) {
    public companion object {
        /** Writes [item] to the given [buffer]. */
        public fun write(buffer: RegistryFriendlyByteBuf, player: Player, item: ItemStack) {
            // Write the ItemStack to a temporary buffer
            val tempBuffer = Unpooled.buffer()
            net.minecraft.world.item.ItemStack.STREAM_CODEC.encode(
                RegistryFriendlyByteBuf(tempBuffer, MinecraftServer.getServer().registryAccess()),
                CraftItemStack.asNMSCopy(item),
            )

            // Process the temporary buffer using ViaVersion
            var item = Types.ITEM1_20_2.read(tempBuffer)

            // Parse the item to the intended destination format
            val connection = Via.getAPI().getConnection(player.uniqueId)
            Via
                .getManager()
                .protocolManager
                .getProtocolPath(
                    Via.getAPI().getPlayerProtocolVersion(player.uniqueId),
                    Via
                        .getManager()
                        .protocolManager.serverProtocolVersion
                        .highestSupportedProtocolVersion(),
                )?.forEach { protocol ->
                    protocol.protocol().itemRewriter?.handleItemToClient(connection, item)?.let {
                        item = it
                    }
                }

            // Write the destination item to the buffer
            Types.ITEM1_20_2.write(buffer, item)
        }
    }

    override fun write(value: ItemStack, buffer: RegistryFriendlyByteBuf) {
        write(buffer, Bukkit.getOnlinePlayers().first(), value)
    }
}